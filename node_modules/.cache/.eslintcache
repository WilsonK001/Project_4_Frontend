[{"/Users/wilsonk/Desktop/Project_4_Frontend/src/index.js":"1","/Users/wilsonk/Desktop/Project_4_Frontend/src/reportWebVitals.js":"2","/Users/wilsonk/Desktop/Project_4_Frontend/src/App.js":"3","/Users/wilsonk/Desktop/Project_4_Frontend/src/components/Edit.js":"4","/Users/wilsonk/Desktop/Project_4_Frontend/src/components/Add.js":"5"},{"size":500,"mtime":1629820590053,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1629820590053,"results":"8","hashOfConfig":"7"},{"size":1795,"mtime":1629832323810,"results":"9","hashOfConfig":"7"},{"size":2435,"mtime":1629828077258,"results":"10","hashOfConfig":"7"},{"size":1705,"mtime":1629828222422,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"2794pp",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/wilsonk/Desktop/Project_4_Frontend/src/index.js",[],["24","25"],"/Users/wilsonk/Desktop/Project_4_Frontend/src/reportWebVitals.js",[],"/Users/wilsonk/Desktop/Project_4_Frontend/src/App.js",["26","27","28"],"/Users/wilsonk/Desktop/Project_4_Frontend/src/components/Edit.js",[],"/Users/wilsonk/Desktop/Project_4_Frontend/src/components/Add.js",["29"],"import React, {useState, useEffect} from 'react'\n\nconst Add = (props) => {\n    let emptyDog = {name: '', breed: '', age: '', gender: '', color: '', image: '', weight: ''}\n    const [dog, setDog] = useState(emptyDog)\n\n    // Creating handlers\n    const handleChange = (event) => {\n        setDog({...dog, [event.target.name]: event.target.value})\n    }\n\n    const handleSubmit = (event) =>{\n        event.preventDefault()\n        props.handleCreate(dog)\n    }\n    return(\n      <>\n        <form onSubmit={handleSubmit}>\n            \n            <label htmlFor=\"name\">Name:</label>\n            <input type=\"text\" name=\"name\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"breed\">Breed:</label>\n            <input type=\"text\" name=\"breed\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"age\">Age: </label>\n            <input type=\"number\" name=\"age\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"gender\">Gender:</label>\n            <input type=\"text\" name=\"gender\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"color\">Color:</label>\n            <input type=\"text\" name=\"color\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"image\">Image:</label>\n            <input type=\"text\" name=\"image\" \n            onChange={handleChange}/>\n            <br />\n            <label htmlFor=\"weight\">Weight: </label>\n            <input type=\"number\" name=\"weight\"\n            onChange={handleChange} />\n            <br />\n            <br />\n            <input type=\"submit\"/>\n\n        </form>\n    </>\n    )\n}\n\nexport default Add",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":12},{"ruleId":"34","severity":1,"message":"38","line":35,"column":10,"nodeType":"36","messageId":"37","endLine":35,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":59,"column":9,"nodeType":"41","endLine":59,"endColumn":32},{"ruleId":"34","severity":1,"message":"42","line":1,"column":26,"nodeType":"36","messageId":"37","endLine":1,"endColumn":35},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'Edit' is defined but never used.","Identifier","unusedVar","'handleUpdate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]